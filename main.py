
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, ConversationHandler, filters
)
import os
import csv

ASK_NAME, ASK_EMAIL = range(2)
user_data = {}
CSV_FILE = "subscribers.csv"
TOKEN = os.environ.get("TOKEN")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —Ö–æ—á—É", callback_data="yes")],
        [InlineKeyboardButton("‚è≥ –ü–æ–∫–∞ –Ω–µ —Å–µ–π—á–∞—Å", callback_data="no")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –≤ StylePro!\n\n"
        "‚ú® –ú—ã —Ä–∞—Å—Å—ã–ª–∞–µ–º —Å—Ç–∏–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã, –ø–æ–¥–±–æ—Ä–∫–∏ –æ–±—Ä–∞–∑–æ–≤, —Ç—Ä–µ–Ω–¥—ã –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –æ—Ç —Å—Ç–∏–ª–∏—Å—Ç–æ–≤.\n"
        "–•–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –≤—Å—ë —ç—Ç–æ –ø—Ä—è–º–æ –Ω–∞ –ø–æ—á—Ç—É?"
    )
    await update.message.reply_text(text, reply_markup=reply_markup)

async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    choice = query.data

    if choice == "yes":
        await query.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! üòä –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        return ASK_NAME
    else:
        await query.edit_message_text("–û–∫–µ–π, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /start üòâ")
        return ConversationHandler.END

async def ask_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.effective_user.id] = {"name": update.message.text}
    await update.message.reply_text("–ê —Ç–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ e-mail, –∫—É–¥–∞ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å—Ç–∏–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã üíå")
    return ASK_EMAIL

async def finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data[user_id]["email"] = update.message.text
    name = user_data[user_id]["name"]
    email = user_data[user_id]["email"]

    with open(CSV_FILE, "a", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow([name, email])

    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ, {name}! ‚ú® –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω. –°–∫–æ—Ä–æ –ø–æ–ª—É—á–∏—à—å —Å—Ç–∏–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –Ω–∞ {email} üíå"
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫–µ–π, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /start üòâ")
    return ConversationHandler.END

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            CallbackQueryHandler(handle_choice, pattern="^(yes|no)$")
        ],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_email)],
            ASK_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, finish)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()
